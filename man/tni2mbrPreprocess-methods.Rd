% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MBR-methods.R
\docType{methods}
\name{tni2mbrPreprocess,TNI-method}
\alias{tni2mbrPreprocess,TNI-method}
\alias{tni2mbrPreprocess}
\title{A preprocessing function for objects of class MBR.}
\usage{
\S4method{tni2mbrPreprocess}{TNI}(TNI1, TNI2, regulatoryElements1 = NULL,
  regulatoryElements2 = NULL, verbose = TRUE)
}
\arguments{
\item{TNI1}{A 'TNI' class object.}

\item{TNI2}{Another 'TNI' class object}

\item{regulatoryElements1}{A character vector specifying which 
'TNI1' regulatory elements should be evaluated.}

\item{regulatoryElements2}{A character vector specifying which 
'TNI2' regulatory elements should be evaluated.}

\item{verbose}{A single logical value specifying to display detailed messages 
(when verbose=TRUE) or not (when verbose=FALSE).}
}
\value{
An \linkS4class{MBR} object.
}
\description{
This function merges two TNI class objects and creates one MBR class object.
}
\examples{
#--- load a dataset for demonstration
data("dt4rtn", package = "RTN")
gexp <- dt4rtn$gexp
annot <- dt4rtn$gexpIDs
tfs1 <- dt4rtn$tfs[c("IRF8","IRF1","PRDM1","AFF3","E2F3")]
tfs2 <- dt4rtn$tfs[c("HCLS1","STAT4","STAT1","LMO4","ZNF552")]

\dontrun{

##--- compute a TNI for tfs1
tni1 <- new("TNI", gexp=gexp, transcriptionFactors=tfs1)
tni1 <- tni.preprocess(tni1, gexpIDs=annot)
tni1 <-tni.permutation(tni1)
tni1 <-tni.bootstrap(tni1)

##--- compute a TNI for tfs2
tni2 <- new("TNI", gexp=gexp, transcriptionFactors=tfs2)
tni2 <- tni.preprocess(tni2, gexpIDs=annot)
tni2 <-tni.permutation(tni2)
tni2 <-tni.bootstrap(tni2)

##--- run tni2mbrPreprocess
rmbr <- tni2mbrPreprocess(tni1, tni2)
}

}
